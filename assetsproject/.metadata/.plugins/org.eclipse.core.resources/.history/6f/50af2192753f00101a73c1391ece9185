package com.java.asm.dao.imp;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.java.asm.dao.UserDao;
import com.java.asm.model.User;
import com.java.asm.model.Role;
import com.java.asm.util.ConnectionHelper;

public class UserDaoImpl implements UserDao {

    private static final Logger logger = Logger.getLogger(UserDaoImpl.class);

    @Override
    public boolean addUser(User user) {
        String sql = "INSERT INTO users (name, email, user_password, role) VALUES (?, ?, ?, ?)";
        try (Connection con = ConnectionHelper.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {

            ps.setString(1, user.getName());
            ps.setString(2, user.getEmail());
            ps.setString(3, user.getPassword());
            ps.setString(4, user.getRole().toString());

            boolean result = ps.executeUpdate() > 0;
            if (result) logger.info("User added successfully: " + user.getEmail());
            return result;
        } catch (Exception e) {
            logger.error("Error adding user: " + e.getMessage());
            e.printStackTrace();
        }
        return false;
    }

    @Override
    public User getUserById(int id) {
        String sql = "SELECT * FROM users WHERE id = ?";
        try (Connection con = ConnectionHelper.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {

            ps.setInt(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    User user = mapResultSetToUser(rs);
                    logger.info("User fetched by ID: " + id);
                    return user;
                }
            }
        } catch (Exception e) {
            logger.severe("Error getting user by ID: " + e.getMessage());
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public User getUserByEmail(String email) {
        String sql = "SELECT * FROM users WHERE email = ?";
        try (Connection con = ConnectionHelper.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {

            ps.setString(1, email);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    User user = mapResultSetToUser(rs);
                    logger.info("User fetched by email: " + email);
                    return user;
                }
            }
        } catch (Exception e) {
            logger.severe("Error getting user by email: " + e.getMessage());
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public List<User> getAllUsers() {
        List<User> list = new ArrayList<>();
        String sql = "SELECT * FROM users";
        try (Connection con = ConnectionHelper.getConnection();
             PreparedStatement ps = con.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                list.add(mapResultSetToUser(rs));
            }
            logger.info("All users fetched. Count: " + list.size());
        } catch (Exception e) {
            logger.severe("Error getting all users: " + e.getMessage());
            e.printStackTrace();
        }
        return list;
    }

    @Override
    public boolean updateUser(User user) {
        String sql = "UPDATE users SET name = ?, email = ?, user_password = ?, role = ? WHERE id = ?";
        try (Connection con = ConnectionHelper.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {

            ps.setString(1, user.getName());
            ps.setString(2, user.getEmail());
            ps.setString(3, user.getPassword());
            ps.setString(4, user.getRole().toString());
            ps.setInt(5, user.getId());

            boolean result = ps.executeUpdate() > 0;
            if (result) logger.info("User updated successfully: ID=" + user.getId());
            return result;
        } catch (Exception e) {
            logger.severe("Error updating user: " + e.getMessage());
            e.printStackTrace();
        }
        return false;
    }

    @Override
    public boolean deleteUser(int id) {
        String sql = "DELETE FROM users WHERE id = ?";
        try (Connection con = ConnectionHelper.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {

            ps.setInt(1, id);
            boolean result = ps.executeUpdate() > 0;
            if (result) logger.info("User deleted successfully: ID=" + id);
            return result;
        } catch (Exception e) {
            logger.severe("Error deleting user: " + e.getMessage());
            e.printStackTrace();
        }
        return false;
    }

    @Override
    public User authenticate(String email, String password) {
        String sql = "SELECT * FROM users WHERE email = ? AND user_password = ?";
        try (Connection con = ConnectionHelper.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {

            ps.setString(1, email);
            ps.setString(2, password);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    User user = mapResultSetToUser(rs);
                    logger.info("User authenticated successfully: " + email);
                    return user;
                } else {
                    logger.info("Authentication failed for: " + email);
                }
            }
        } catch (Exception e) {
            logger.severe("Error authenticating user: " + e.getMessage());
            e.printStackTrace();
        }
        return null;
    }

    private User mapResultSetToUser(ResultSet rs) throws SQLException {
        User user = new User();
        user.setId(rs.getInt("id"));
        user.setName(rs.getString("name"));
        user.setEmail(rs.getString("email"));
        user.setPassword(rs.getString("user_password"));
        user.setRole(Role.valueOf(rs.getString("role")));
        Timestamp ts = rs.getTimestamp("created_at");
        if (ts != null) {
            user.setCreatedAt(ts.toLocalDateTime());
        }
        return user;
    }
}
