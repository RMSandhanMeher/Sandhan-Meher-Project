package com.java.asm.service;

import com.java.asm.dao.AssetIssueDao;
import com.java.asm.dao.imp.AssetIssueDaoImpl;
import com.java.asm.model.AssetIssue;
import org.apache.log4j.Logger;

import java.time.LocalDate;
import java.util.List;

public class AssetIssueService {

    private static final Logger logger = Logger.getLogger(AssetIssueService.class);
    private final AssetIssueDao assetIssueDao = new AssetIssueDaoImpl();

    public boolean issueAsset(AssetIssue assetIssue) {
        try {
            boolean result = assetIssueDao.issueAsset(assetIssue);
            if (result) {
                logger.info("service layer :issueAsset: Asset issued successfully. Asset ID: " + assetIssue.getAssetId());
            } else {
                logger.info("service layer :issueAsset: Failed to issue asset. Asset ID: " + assetIssue.getAssetId());
            }
            return result;
        } catch (Exception e) {
            logger.error("service layer :issueAsset: Error - " + e.getMessage(), e);
            return false;
        }
    }

    public AssetIssue getIssueById(int id) {
        try {
            AssetIssue issue = assetIssueDao.getIssueById(id);
            if (issue != null) {
                logger.info("service layer :getIssueById: Asset issue retrieved. ID: " + id);
            } else {
                logger.info("service layer :getIssueById: No issue found for ID: " + id);
            }
            return issue;
        } catch (Exception e) {
            logger.error("service layer :getIssueById: Error - " + e.getMessage(), e);
            return null;
        }
    }

    public List<AssetIssue> getAllIssuedAssets() {
        try {
            List<AssetIssue> list = assetIssueDao.getAllIssuedAssets();
            logger.info("service layer :getAllIssuedAssets: Total issued assets fetched = " + list.size());
            return list;
        } catch (Exception e) {
            logger.error("service layer :getAllIssuedAssets: Error - " + e.getMessage(), e);
            return null;
        }
    }

    public List<AssetIssue> getIssuesByUserId(int userId) {
        try {
            List<AssetIssue> list = assetIssueDao.getIssuesByUserId(userId);
            logger.info("service layer :getIssuesByUserId: Issues for user " + userId + " = " + list.size());
            return list;
        } catch (Exception e) {
            logger.error("service layer :getIssuesByUserId: Error - " + e.getMessage(), e);
            return null;
        }
    }

    public boolean returnAsset(int issueId, LocalDate returnDate) {
        try {
            boolean result = assetIssueDao.returnAsset(issueId, returnDate);
            if (result) {
                logger.info("service layer :returnAsset: Asset returned successfully. Issue ID: " + issueId);
            } else {
                logger.info("service layer :returnAsset: Failed to return asset. Issue ID: " + issueId);
            }
            return result;
        } catch (Exception e) {
            logger.error("service layer :returnAsset: Error - " + e.getMessage(), e);
            return false;
        }
    }

    public List<AssetIssue> getActiveIssues() {
        try {
            List<AssetIssue> list = assetIssueDao.getActiveIssues();
            logger.info("service layer :getActiveIssues: Active issues found = " + list.size());
            return list;
        } catch (Exception e) {
            logger.error("service layer :getActiveIssues: Error - " + e.getMessage(), e);
            return null;
        }
    }

    public boolean updateIssue(AssetIssue issue) {
        try {
            boolean result = assetIssueDao.updateIssue(issue);
            if (result) {
                logger.info("service layer :updateIssue: Asset issue updated. ID: " + issue.getId());
            } else {
                logger.info("service layer :updateIssue: Failed to update issue. ID: " + issue.getId());
            }
            return result;
        } catch (Exception e) {
            logger.error("service layer :updateIssue: Error - " + e.getMessage(), e);
            return false;
        }
    }
}
