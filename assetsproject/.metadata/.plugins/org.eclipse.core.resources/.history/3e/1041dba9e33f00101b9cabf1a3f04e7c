package com.java.jsf;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

import javax.faces.context.FacesContext;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.criterion.ProjectionList;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;

public class UserDaoImpl implements UserDao {

	static SessionFactory sessionFactory;
	Session session;

	static {
		sessionFactory = SessionHelper.getConnection();
	}
	private int adminId = 2;
	private int groupId;
	private List<GroupMembers> allUsersOfAGroup;
	private double advanceCollected;
	private double totalExpenditure;
	private List<KeyValues> getPayUser ;
	private List<KeyValues> giveUser ;

	public int getGroupId() {
		return groupId;
	}

	public void setGroupId(int groupId) {
		this.groupId = groupId;
	}

	public List<GroupMembers> getAllUsersOfAGroup() {
		return allUsersOfAGroup;
	}

	public void setAllUsersOfAGroup(List<GroupMembers> allUsersOfAGroup) {
		this.allUsersOfAGroup = allUsersOfAGroup;
	}

	public List<KeyValues> getGetPayUser() {
		return getPayUser;
	}

	public void setGetPayUser(List<KeyValues> getPayUser) {
		this.getPayUser = getPayUser;
	}

	public List<KeyValues> getGiveUser() {
		return giveUser;
	}

	public void setGiveUser(List<KeyValues> giveUser) {
		this.giveUser = giveUser;
	}

	public double getAdvanceCollected() {
		return advanceCollected;
	}

	public void setAdvanceCollected(double advanceCollected) {
		this.advanceCollected = advanceCollected;
	}

	public double getTotalExpenditure() {
		return totalExpenditure;
	}

	public void setTotalExpenditure(double totalExpenditure) {
		this.totalExpenditure = totalExpenditure;
	}

	public int getAdminId() {
		return adminId;
	}

	public void setAdminId(int adminId) {
		this.adminId = adminId;
	}

	@Override
	public String addUserDao(Users user) {
		session = sessionFactory.openSession();
		Transaction trans = session.beginTransaction();
		session.save(user);
		trans.commit();
		return "User Added...";
	}

	@Override
	public List<Users> showUserDao() {
		session = sessionFactory.openSession();
		Criteria cr = session.createCriteria(Users.class);
		return cr.list();
	}

	@Override
	public String addGroup(TravelGroup travelGroup) {
		System.out.println(travelGroup);
		session = sessionFactory.openSession();
		Transaction trans = session.beginTransaction();
		session.save(travelGroup);
		trans.commit();
		System.out.println("Got");
		return "Travel Group Added...";
	}

	@Override
	public String addGroupMembers(GroupMembers groupMember) {
		groupMember.setGmId(2);
		System.out.println(groupMember);
		session = sessionFactory.openSession();
		Transaction trans = session.beginTransaction();
		session.save(groupMember);
		trans.commit();
		return "Group Member Added...";
	}

	public String settlement(int grpId) {
	    session = sessionFactory.openSession();

	    // Initialize lists to avoid NullPointerException
	    this.getPayUser = new ArrayList<>();
	    this.giveUser = new ArrayList<>();

	    // Getting TravelGroup and adminId
	    Criteria cr1 = session.createCriteria(TravelGroup.class);
	    cr1.add(Restrictions.eq("groupId", grpId));
	    TravelGroup travelGroup = (TravelGroup) cr1.uniqueResult(); // FIXED here
	    this.adminId = travelGroup.getCreatedBy();

	    // Get all users of the group
	    Criteria cr = session.createCriteria(GroupMembers.class);
	    cr.add(Restrictions.eq("groupId", grpId));
	    this.allUsersOfAGroup = cr.list();

	    // Get total advance collected
	    ProjectionList projectionList = Projections.projectionList();
	    projectionList.add(Projections.sum("amountCollected"));
	    cr.setProjection(projectionList);
	    Double amount = (Double) cr.uniqueResult(); // e.g., 80000
	    this.advanceCollected = amount != null ? amount : 0.0;

	    // Get number of users
	    cr = session.createCriteria(GroupMembers.class);
	    cr.add(Restrictions.eq("groupId", grpId));
	    projectionList = Projections.projectionList();
	    projectionList.add(Projections.rowCount());
	    cr.setProjection(projectionList);
	    Long count = (Long) cr.uniqueResult();
	    if (count == null || count == 0) count = 1L; // prevent divide-by-zero
	    System.out.println("Total People Went for Tour is " + count);

	    System.out.println("Amount Collected for Tour from All Members  " + amount);

	    // Get total expenses
	    cr = session.createCriteria(DailyExpenses.class);
	    cr.add(Restrictions.eq("groupId", grpId));
	    projectionList = Projections.projectionList();
	    projectionList.add(Projections.sum("amount"));
	    cr.setProjection(projectionList);
	    Double amt = (Double) cr.uniqueResult(); // e.g., 97000
	    this.totalExpenditure = amt != null ? amt : 0.0;

	    double balance = (this.totalExpenditure - this.advanceCollected) / count; // amount per head
	    System.out.println("Total Expense Happend for Tour is " + this.totalExpenditure);
	    System.out.println("Balance to be Shared from Individual  " + balance);

	    // Get amount paid by each user
	    cr = session.createCriteria(DailyExpenses.class);
	    cr.add(Restrictions.eq("groupId", grpId));
	    projectionList = Projections.projectionList();
	    projectionList.add(Projections.groupProperty("paidBy"));
	    projectionList.add(Projections.sum("amount"));
	    cr.setProjection(projectionList);

	    Map<Integer, Double> mapResult = new Hashtable<>();
	    List<Object[]> result = cr.list();
	    for (Object[] row : result) {
	        Integer key = (Integer) row[0];
	        Double value = (Double) row[1];
	        mapResult.put(key, value);
	        System.out.println("Paid By: " + key + ", Amount Paid: " + value);
	    }

	    // Adjust admin's amount
	    Double adminPaid = mapResult.get(adminId) != null ? mapResult.get(adminId) : 0.0;
	    double actAmount = adminPaid - this.advanceCollected;
	    double refAmount = actAmount - balance;
	    mapResult.put(adminId, refAmount);

	    System.out.println("Ref To be Paid To/By Admin  " + refAmount);

	    // Determine who pays and who gets
	    for (GroupMembers groupMember : allUsersOfAGroup) {
	        int userId = groupMember.getUserId();
	        double paid = mapResult.get(userId) != null ? mapResult.get(userId) : 0.0;
	        double difference = paid - balance;

	        if (difference > 0) {
	            getPayUser.add(new KeyValues(userId, difference));
	        } else {
	            giveUser.add(new KeyValues(userId, Math.abs(difference)));
	        }
	    }

	    return null;
	}


	@Override
	public String addDailyExpenses(DailyExpenses dailyExpenses) {
		session = sessionFactory.openSession();
		Transaction trans = session.beginTransaction();
		session.save(dailyExpenses);
		trans.commit();
		return "Expense Recorded...";
	}

	@Override
	public List<DailyExpenses> showAllExpenses(int groupId) {
		session = sessionFactory.openSession();
		Criteria cr = session.createCriteria(DailyExpenses.class);
		cr.add(Restrictions.eq("groupId", groupId));
		List<DailyExpenses> dailyExpenses = cr.list();
		return dailyExpenses;
	}

}

class KeyValues {
	int key;
	double value;

	KeyValues() {
	}

	KeyValues(int key, double value) {
		this.key = key;
		this.value = value;
	}
}
