package com.java.jsf;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

import javax.faces.context.FacesContext;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.criterion.ProjectionList;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;

public class UserDaoImpl implements UserDao {

	static SessionFactory sessionFactory;
	Session session;

	static {
		sessionFactory = SessionHelper.getConnection();
	}
	private int adminId = 2;
	private int groupId;
	private List<GroupMembers> allUsersOfAGroup;
	private double advanceCollected;
	private double totalExpenditure;
	private List<KeyValues> getPayUser ;
	private List<KeyValues> giveUser ;

	public int getGroupId() {
		return groupId;
	}

	public void setGroupId(int groupId) {
		this.groupId = groupId;
	}

	public List<GroupMembers> getAllUsersOfAGroup() {
		return allUsersOfAGroup;
	}

	public void setAllUsersOfAGroup(List<GroupMembers> allUsersOfAGroup) {
		this.allUsersOfAGroup = allUsersOfAGroup;
	}

	public List<KeyValues> getGetPayUser() {
		return getPayUser;
	}

	public void setGetPayUser(List<KeyValues> getPayUser) {
		this.getPayUser = getPayUser;
	}

	public List<KeyValues> getGiveUser() {
		return giveUser;
	}

	public void setGiveUser(List<KeyValues> giveUser) {
		this.giveUser = giveUser;
	}

	public double getAdvanceCollected() {
		return advanceCollected;
	}

	public void setAdvanceCollected(double advanceCollected) {
		this.advanceCollected = advanceCollected;
	}

	public double getTotalExpenditure() {
		return totalExpenditure;
	}

	public void setTotalExpenditure(double totalExpenditure) {
		this.totalExpenditure = totalExpenditure;
	}

	public int getAdminId() {
		return adminId;
	}

	public void setAdminId(int adminId) {
		this.adminId = adminId;
	}

	@Override
	public String addUserDao(Users user) {
		session = sessionFactory.openSession();
		Transaction trans = session.beginTransaction();
		session.save(user);
		trans.commit();
		return "User Added...";
	}

	@Override
	public List<Users> showUserDao() {
		session = sessionFactory.openSession();
		Criteria cr = session.createCriteria(Users.class);
		return cr.list();
	}

	@Override
	public String addGroup(TravelGroup travelGroup) {
		System.out.println(travelGroup);
		session = sessionFactory.openSession();
		Transaction trans = session.beginTransaction();
		session.save(travelGroup);
		trans.commit();
		System.out.println("Got");
		return "Travel Group Added...";
	}

	@Override
	public String addGroupMembers(GroupMembers groupMember) {
		groupMember.setGmId(2);
		System.out.println(groupMember);
		session = sessionFactory.openSession();
		Transaction trans = session.beginTransaction();
		session.save(groupMember);
		trans.commit();
		return "Group Member Added...";
	}

	public String settlement(int grpId) {
	    session = sessionFactory.openSession();
	    try {
	        // 1. Get adminId
	        Criteria cr1 = session.createCriteria(TravelGroup.class);
	        cr1.add(Restrictions.eq("groupId", grpId));
	        TravelGroup travelGroup = (TravelGroup) cr1.uniqueResult();
	        this.adminId = travelGroup.getCreatedBy();

	        // 2. Get all group members
	        Criteria cr = session.createCriteria(GroupMembers.class);
	        cr.add(Restrictions.eq("groupId", grpId));
	        this.allUsersOfAGroup = cr.list();

	        // 3. Get total advance collected
	        cr = session.createCriteria(GroupMembers.class);
	        cr.add(Restrictions.eq("groupId", grpId));
	        ProjectionList projectionList = Projections.projectionList();
	        projectionList.add(Projections.sum("amountCollected"));
	        cr.setProjection(projectionList);
	        Double collected = (Double) cr.uniqueResult();
	        this.advanceCollected = collected != null ? collected : 0.0;

	        // 4. Get number of people
	        cr = session.createCriteria(GroupMembers.class);
	        cr.add(Restrictions.eq("groupId", grpId));
	        projectionList = Projections.projectionList();
	        projectionList.add(Projections.rowCount());
	        cr.setProjection(projectionList);
	        Long count = (Long) cr.uniqueResult();
	        count = count != null ? count : 1;

	        // 5. Get total expenses
	        cr = session.createCriteria(DailyExpenses.class);
	        cr.add(Restrictions.eq("groupId", grpId));
	        projectionList = Projections.projectionList();
	        projectionList.add(Projections.sum("amount"));
	        cr.setProjection(projectionList);
	        Double exp = (Double) cr.uniqueResult();
	        this.totalExpenditure = exp != null ? exp : 0.0;

	        double balance = (this.totalExpenditure - this.advanceCollected) / count;

	        // 6. Get paid amount per user
	        cr = session.createCriteria(DailyExpenses.class);
	        cr.add(Restrictions.eq("groupId", grpId));
	        projectionList = Projections.projectionList();
	        projectionList.add(Projections.groupProperty("paidBy"));
	        projectionList.add(Projections.sum("amount"));
	        cr.setProjection(projectionList);
	        List<Object[]> result = cr.list();
	        Map<Integer, Double> mapResult = new Hashtable<>();
	        for (Object[] row : result) {
	            mapResult.put((Integer) row[0], (Double) row[1]);
	        }

	        // 7. Adjust admin's actual contribution
	        double adminPaid = mapResult.getOrDefault(adminId, 0.0);
	        double actualAdminAmount = adminPaid - 80000;
	        double adminRefAmount = actualAdminAmount - balance;
	        mapResult.put(adminId, adminRefAmount);

	        // 8. Determine who should pay and receive
	        getPayUser = new ArrayList<>();
	        giveUser = new ArrayList<>();

	        for (GroupMembers groupMember : allUsersOfAGroup) {
	            int userId = groupMember.getUserId();
	            double paidAmount = mapResult.getOrDefault(userId, 0.0);
	            double netBalance = paidAmount - balance;
	            KeyValues kv = new KeyValues(userId, Math.abs(netBalance));
	            if (netBalance > 0) {
	                getPayUser.add(kv);
	            } else if (netBalance < 0) {
	                giveUser.add(kv);
	            }
	        }

	    } finally {
	        if (session != null) {
	            session.close();
	        }
	    }
	    return null;
	}


	@Override
	public String addDailyExpenses(DailyExpenses dailyExpenses) {
		session = sessionFactory.openSession();
		Transaction trans = session.beginTransaction();
		session.save(dailyExpenses);
		trans.commit();
		return "Expense Recorded...";
	}

	@Override
	public List<DailyExpenses> showAllExpenses(int groupId) {
		session = sessionFactory.openSession();
		Criteria cr = session.createCriteria(DailyExpenses.class);
		cr.add(Restrictions.eq("groupId", groupId));
		List<DailyExpenses> dailyExpenses = cr.list();
		return dailyExpenses;
	}

}

