package com.java.asm.bean;

import com.java.asm.model.AssetIssue;
import com.java.asm.model.Status;
import com.java.asm.model.User;
import com.java.asm.model.Asset;
import com.java.asm.service.AssetIssueService;
import com.java.asm.service.AssetService;
import com.java.asm.service.UserService;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import java.io.Serializable;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;

public class AssetIssueController implements Serializable {

    private static final long serialVersionUID = 1L;
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd");

    private AssetIssue assetIssue = new AssetIssue();
    private List<AssetIssue> assetIssueList;
    private String message;
    private String messageType; // "success" or "error"
    private String expectedReturnDateString; // For JSF date input

    private final AssetIssueService assetIssueService = new AssetIssueService();
    private final UserService userService = new UserService();
    private final AssetService assetService = new AssetService();

    public String issueAsset() {
        try {
            // Convert date string to LocalDate
            if (expectedReturnDateString != null && !expectedReturnDateString.isEmpty()) {
                assetIssue.setExpectedReturnDate(LocalDate.parse(expectedReturnDateString, DATE_FORMATTER));
            }

            // Validate inputs
            if (assetIssue.getIssuedTo() <= 0) {
                setErrorMessage("Please select a valid user");
                return null;
            }
            
            if (assetIssue.getAssetId() <= 0) {
                setErrorMessage("Please select a valid asset");
                return null;
            }
            
            // Check if asset is available
            Asset asset = assetService.getAssetById(assetIssue.getAssetId());
            if (asset == null || asset.getQuantity() <= 0) {
                setErrorMessage("Selected asset is not available");
                return null;
            }

            // Set default values
            assetIssue.setIssueDate(LocalDate.now());
            assetIssue.setIssuedBy(1); // Default admin ID - should be current user in real app
            assetIssue.setStatus(Status.ISSUED);

            // Check for existing issue
            boolean exists = assetIssueService.checkIfIssueExists(assetIssue.getIssuedTo(), assetIssue.getAssetId());
            if (exists) {
                setErrorMessage("This asset is already issued to the selected user");
                return null;
            }

            // Issue the asset
            boolean result = assetIssueService.issueAsset(assetIssue);
            if (result) {
                // Update asset quantity
                asset.setQuantity(asset.getQuantity() - 1);
                assetService.updateAsset(asset);
                
                setSuccessMessage("Asset issued successfully!");
                assetIssue = new AssetIssue(); // reset form
                expectedReturnDateString = null; // reset date input
            } else {
                setErrorMessage("Failed to issue asset. Please try again.");
            }
        } catch (Exception e) {
            setErrorMessage("An error occurred: " + e.getMessage());
            FacesContext.getCurrentInstance().addMessage(null, 
                new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error", e.getMessage()));
        }
        refreshIssues();
        return null;
    }

    // Add this method for returning assets
    public String returnAsset(int issueId) {
        try {
            boolean result = assetIssueService.returnAsset(issueId);
            if (result) {
                setSuccessMessage("Asset returned successfully!");
            } else {
                setErrorMessage("Failed to return asset.");
            }
        } catch (Exception e) {
            setErrorMessage("Error returning asset: " + e.getMessage());
        }
        refreshIssues();
        return null;
    }

    // ... [keep all other existing methods] ...

    // Add getter and setter for the date string
    public String getExpectedReturnDateString() {
        return expectedReturnDateString;
    }

    public void setExpectedReturnDateString(String expectedReturnDateString) {
        this.expectedReturnDateString = expectedReturnDateString;
    }
}